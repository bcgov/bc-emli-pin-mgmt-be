{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"HelloWorldResponse": {
				"properties": {
					"message": {
						"type": "string"
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"createdPIN": {
				"description": "A PIN generated for a homeowner, checked for uniqueness against the database. Defaults to 8 character length and\nall numbers + lowercase letters as the character set.",
				"properties": {
					"pin": {
						"type": "string"
					}
				},
				"required": [
					"pin"
				],
				"type": "object",
				"additionalProperties": false,
				"example": "abcdefgh"
			},
			"pinRangeErrorType": {
				"description": "Generic range error that may occur when you give a value out of bounds to a pin function",
				"properties": {
					"message": {
						"type": "string"
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"message": "PIN must be of length 1 or greater"
				}
			},
			"serverErrorType": {
				"description": "Generic unknown server error",
				"properties": {
					"message": {
						"type": "string"
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"message": "Internal Server Error"
				}
			},
			"PIN": {
				"type": "string",
				"example": "abcdefgh",
				"description": "A PIN generated for a homeowner. Defaults to 8 character length and\nall numbers + lowercase letters as the character set."
			},
			"PINObject": {
				"description": "An object containing an array of unique, generated PINS",
				"properties": {
					"pins": {
						"items": {
							"$ref": "#/components/schemas/PIN"
						},
						"type": "array"
					}
				},
				"required": [
					"pins"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"pins": [
						"abcdefgh",
						"12345678"
					]
				}
			},
			"GeocoderAddress": {
				"description": "BC Geocoder address search result, including score, full address and site ID",
				"properties": {
					"score": {
						"type": "number",
						"format": "double"
					},
					"fullAddress": {
						"type": "string"
					},
					"siteID": {
						"type": "string"
					}
				},
				"required": [
					"score",
					"fullAddress",
					"siteID"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"score": 100,
					"fullAddress": "123 Example Street, City, BC",
					"siteID": "dc1111ba-1f11-111-1eda-111ca1f111c1"
				}
			},
			"getAddressResults": {
				"description": "An object containing an array of the BC Geocoder address search results.",
				"properties": {
					"results": {
						"items": {
							"$ref": "#/components/schemas/GeocoderAddress"
						},
						"type": "array"
					}
				},
				"required": [
					"results"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"results": [
						{
							"score": 100,
							"fullAddress": "123 Example Street, City, BC",
							"siteID": "dc1111ba-1f11-111-1eda-111ca1f111c1"
						}
					]
				}
			},
			"searchRangeErrorType": {
				"description": "Generic range error that may occur when you give a value out of bounds to a search function",
				"properties": {
					"message": {
						"type": "string"
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"message": "Search string must be of length 3 or greater"
				}
			},
			"geocoderReferenceErrorType": {
				"description": "Reference error that may occur when you have not defined the API environment variables for the geocoder functions",
				"properties": {
					"message": {
						"type": "string"
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"additionalProperties": false,
				"example": {
					"message": "Geocoder API base URL or 'addresses' endpoint URL is undefined."
				}
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "bc-emli-pin-mgmt-be",
		"version": "1.0.0",
		"description": "BC Virtual Home Energy Rating PIN Management System Backend",
		"license": {
			"name": "Apache-2.0"
		},
		"contact": {
			"name": "Government of British Columbia"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/helloworld": {
			"get": {
				"operationId": "GetMessage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HelloWorldResponse"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": []
			}
		},
		"/pins/create": {
			"get": {
				"operationId": "GetPin",
				"responses": {
					"200": {
						"description": "An object containing the unique PIN",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/createdPIN"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/pinRangeErrorType"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/serverErrorType"
								}
							}
						}
					}
				},
				"description": "Used to create a single, unique PIN, checking against the DB to do so.\nExpected error codes and messages:\n- `422`\n-- `PIN must be of length 1 or greater`\n-- `Too many PIN creation attempts: consider expanding your pin length or character set to allow more unique PINs.`\n- `500`\n -- `Internal Server Error`",
				"security": [],
				"parameters": [
					{
						"description": "The length of each PIN. Defaults to 8 characters.",
						"in": "query",
						"name": "pinLength",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "A string (not regex) of the characters to be used to\ngenerate the pin. Default is A-Z excluding O, and 1-9",
						"in": "query",
						"name": "allowedChars",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/pins/initial-create": {
			"get": {
				"operationId": "GetInitialPins",
				"responses": {
					"200": {
						"description": "An object containing an array of the created, unique PINs",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PINObject"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/pinRangeErrorType"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/serverErrorType"
								}
							}
						}
					}
				},
				"description": "Used for the initial creation of PINs, when none exist in the database yet.\nExpected error codes and messages:\n- `422`\n\t-- `PIN must be of length 1 or greater`\n\t-- `Quantity of PINs requested too high: guaranteed repeats for the given pin length and character set.`\n\t-- `The number of PINS created must be greater than 0.`\n- `500`\n\t-- `Internal Server Error`",
				"security": [],
				"parameters": [
					{
						"description": "The quantity of PINs you wish to create.",
						"in": "query",
						"name": "quantity",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "The length of each PIN. Defaults to 8 characters.",
						"in": "query",
						"name": "pinLength",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "A string (not regex) of the characters to be used to\ngenerate the pin. Default is A-Z excluding O, and 1-9",
						"in": "query",
						"name": "allowedChars",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/properties/address/{address}": {
			"get": {
				"operationId": "GetSiteID",
				"responses": {
					"200": {
						"description": "An object with an array of search results.\nEach result contains the match score (from 50-100, 100 being a perfect match) of the result,\nthe full address of the property, and the siteID",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/getAddressResults"
								}
							}
						}
					},
					"422": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/geocoderReferenceErrorType"
								}
							}
						}
					},
					"500": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/serverErrorType"
								}
							}
						}
					}
				},
				"description": "Used to search for a siteID for a property, giving potentially multiple results.\nExpected error codes and messages:\n- `404`\n-- `Not Found` (when not passing in a path parameter as required)\n- `422`\n-- `Geocoder API base URL or 'addresses' endpoint URL is undefined.`\n-- `Search string must be of length 3 or greater`\n- `500`\n -- `Internal Server Error`",
				"security": [],
				"parameters": [
					{
						"description": "The address you wish to find the siteID for",
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}